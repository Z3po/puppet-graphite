[cache]
# Configure carbon directories.
#
# OS environment variables can be used to tell carbon where graphite is
# installed, where to read configuration from and where to write data.
#
#   GRAPHITE_ROOT        - Root directory of the graphite installation.
#                          Defaults to ../
#   GRAPHITE_CONF_DIR    - Configuration directory (where this file lives).
#                          Defaults to $GRAPHITE_ROOT/conf/
#   GRAPHITE_STORAGE_DIR - Storage directory for whipser/rrd/log/pid files.
#                          Defaults to $GRAPHITE_ROOT/storage/
#
# To change other directory paths, add settings to this file. The following
# configuration variables are available with these default values:
#

STORAGE_DIR    = <%= @storage_dir %>
CONF_DIR       = <%= @conf_dir %>
LOG_DIR        = <%= @log_dir %>
PID_DIR        = <%= @pid_dir %>

LOCAL_DATA_DIR = <%= @local_data_dir %>

# Enable daily log rotation. If disabled, a kill -HUP can be used after a manual rotate
ENABLE_LOGROTATION = <%= @enable_logrotation_bool ? 'True' : 'False' %>

# Specify the user to drop privileges to
# If this is blank carbon runs as the user that invokes it
# This user must have write access to the local data directory
USER = <%= @user %>
#
# NOTE: The above settings must be set under [relay] and [aggregator]
#       to take effect for those daemons as well

# Limit the size of the cache to avoid swapping or becoming CPU bound.
# Sorts and serving cache queries gets more expensive as the cache grows.
# Use the value "inf" (infinity) for an unlimited cache size.
MAX_CACHE_SIZE = <%= @max_cache_size %>

# Limits the number of whisper update_many() calls per second, which effectively
# means the number of write requests sent to the disk. This is intended to
# prevent over-utilizing the disk and thus starving the rest of the system.
# When the rate of required updates exceeds this, then carbon's caching will
# take effect and increase the overall throughput accordingly.
MAX_UPDATES_PER_SECOND = <%= @max_updates_per_second %>

# If defined, this changes the MAX_UPDATES_PER_SECOND in Carbon when a
# stop/shutdown is initiated.  This helps when MAX_UPDATES_PER_SECOND is
# relatively low and carbon has cached a lot of updates; it enables the carbon
# daemon to shutdown more quickly. 
<%- if @max_updates_per_second_on_shutdown.nil? -%>
# MAX_UPDATES_PER_SECOND_ON_SHUTDOWN = 1000
<%- else -%>
MAX_UPDATES_PER_SECOND_ON_SHUTDOWN = <%= @max_updates_per_second_on_shutdown %>
<%- end -%>

# Softly limits the number of whisper files that get created each minute.
# Setting this value low (like at 50) is a good way to ensure your graphite
# system will not be adversely impacted when a bunch of new metrics are
# sent to it. The trade off is that it will take much longer for those metrics'
# database files to all get created and thus longer until the data becomes usable.
# Setting this value high (like "inf" for infinity) will cause graphite to create
# the files quickly but at the risk of slowing I/O down considerably for a while.
MAX_CREATES_PER_MINUTE = <%= @max_creates_per_minute %>

LINE_RECEIVER_INTERFACE = <%= @line_receiver_interface %>
LINE_RECEIVER_PORT = <%= @line_receiver_port %>

# Set this to True to enable the UDP listener. By default this is off
# because it is very common to run multiple carbon daemons and managing
# another (rarely used) port for every carbon instance is not fun.
ENABLE_UDP_LISTENER = <%= @enable_udp_listener_bool ? 'True' : 'False' %>
UDP_RECEIVER_INTERFACE = <%= @udp_receiver_interface %>
UDP_RECEIVER_PORT = <%= @udp_receiver_port %>

PICKLE_RECEIVER_INTERFACE = <%= @pickle_receiver_interface %>
PICKLE_RECEIVER_PORT = <%= @pickle_receiver_port %>

# Set to false to disable logging of successful connections
LOG_LISTENER_CONNECTIONS = <%= @log_listener_connections_bool ? 'True' : 'False' %>

# Per security concerns outlined in Bug #817247 the pickle receiver
# will use a more secure and slightly less efficient unpickler.
# Set this to True to revert to the old-fashioned insecure unpickler.
USE_INSECURE_UNPICKLER = <%= @log_listener_connections_bool ? 'True' : 'False' %>

CACHE_QUERY_INTERFACE = <%= @cache_query_interface %>
CACHE_QUERY_PORT = <%= @cache_query_port %>

# Set this to False to drop datapoints received after the cache
# reaches MAX_CACHE_SIZE. If this is True (the default) then sockets
# over which metrics are received will temporarily stop accepting
# data until the cache size falls below 95% MAX_CACHE_SIZE.
USE_FLOW_CONTROL = <%= @use_flow_control_bool ? 'True' : 'False' %>

# By default, carbon-cache will log every whisper update and cache hit. This can be excessive and
# degrade performance if logging on the same volume as the whisper data is stored.
LOG_UPDATES = <%= @log_updates_bool ? 'True' : 'False' %>
LOG_CACHE_HITS = <%= @log_cache_hits_bool ? 'True' : 'False' %>
LOG_CACHE_QUEUE_SORTS = <%= @log_cache_queue_sorts_bool ? 'True' : 'False' %>

# The thread that writes metrics to disk can use on of the following strategies
# determining the order in which metrics are removed from cache and flushed to
# disk. The default option preserves the same behavior as has been historically
# available in version 0.9.10.
#
# sorted - All metrics in the cache will be counted and an ordered list of
# them will be sorted according to the number of datapoints in the cache at the
# moment of the list's creation. Metrics will then be flushed from the cache to
# disk in that order.
#
# max - The writer thread will always pop and flush the metric from cache
# that has the most datapoints. This will give a strong flush preference to
# frequently updated metrics and will also reduce random file-io. Infrequently
# updated metrics may only ever be persisted to disk at daemon shutdown if
# there are a large number of metrics which receive very frequent updates OR if
# disk i/o is very slow.
#
# naive - Metrics will be flushed from the cache to disk in an unordered
# fashion. This strategy may be desirable in situations where the storage for
# whisper files is solid state, CPU resources are very limited or deference to
# the OS's i/o scheduler is expected to compensate for the random write
# pattern.
#
CACHE_WRITE_STRATEGY = <%= @cache_write_strategy %>

# On some systems it is desirable for whisper to write synchronously.
# Set this option to True if you'd like to try this. Basically it will
# shift the onus of buffering writes from the kernel into carbon's cache.
WHISPER_AUTOFLUSH = <%= @whisper_autoflush_bool ? 'True' : 'False' %>

# By default new Whisper files are created pre-allocated with the data region
# filled with zeros to prevent fragmentation and speed up contiguous reads and
# writes (which are common). Enabling this option will cause Whisper to create
# the file sparsely instead. Enabling this option may allow a large increase of
# MAX_CREATES_PER_MINUTE but may have longer term performance implications
# depending on the underlying storage configuration.
WHISPER_SPARSE_CREATE = <%= @whisper_sparse_create_bool ? 'True' : 'False' %>

# Only beneficial on linux filesystems that support the fallocate system call.
# It maintains the benefits of contiguous reads/writes, but with a potentially
# much faster creation speed, by allowing the kernel to handle the block
# allocation and zero-ing. Enabling this option may allow a large increase of
# MAX_CREATES_PER_MINUTE. If enabled on an OS or filesystem that is unsupported
# this option will gracefully fallback to standard POSIX file access methods.
WHISPER_FALLOCATE_CREATE = <%= @whisper_fallocate_create_bool ? 'True' : 'False' %>

# Enabling this option will cause Whisper to lock each Whisper file it writes
# to with an exclusive lock (LOCK_EX, see: man 2 flock). This is useful when
# multiple carbon-cache daemons are writing to the same files
WHISPER_LOCK_WRITES = <%= @whisper_lock_writes_bool ? 'True' : 'False' %>

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
USE_WHITELIST = <%= @use_whitelist_bool ? 'True' : 'False' %>

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = <%= @carbon_metric_prefix %>
CARBON_METRIC_INTERVAL = <%= @carbon_metric_interval %>

# Enable AMQP if you want to receve metrics using an amqp broker
ENABLE_AMQP = <%= @enable_amqp_bool ? 'True' : 'False' %>

# Verbose means a line will be logged for every metric received
# useful for testing
AMQP_VERBOSE = <%= @amqp_verbose_bool ? 'True' : 'False' %>

AMQP_HOST = <%= @amqp_host %>
AMQP_PORT = <%= @amqp_port %>
AMQP_VHOST = <%= @amqp_vhost %>
AMQP_USER = <%= @amqp_user %>
AMQP_PASSWORD = <%= @amqp_password %>
AMQP_EXCHANGE = <%= @amqp_exchange %>
AMQP_METRIC_NAME_IN_BODY = <%= @amqp_metric_name_in_body_bool ? 'True' : 'False' %>

# Patterns for all of the metrics this machine will store. Read more at
# http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol#Bindings
#
# Example: store all sales, linux servers, and utilization metrics
# BIND_PATTERNS = sales.#, servers.linux.#, #.utilization
#
# Example: store everything
# BIND_PATTERNS = #
<%- if !@bind_patterns.nil? -%>
BIND_PATTERNS = <%= Array(@bind_patterns).join(', ') %>
<%- end -%>

# The manhole interface allows you to SSH into the carbon daemon
# and get a python interpreter. BE CAREFUL WITH THIS! If you do
# something like time.sleep() in the interpreter, the whole process
# will sleep! This is *extremely* helpful in debugging, assuming
# you are familiar with the code. If you are not, please don't
# mess with this, you are asking for trouble :)
#
ENABLE_MANHOLE = <%= @enable_manhole_bool ? 'True' : 'False' %>
MANHOLE_INTERFACE = <%= @manhole_interface %>
MANHOLE_PORT = <%= @manhole_port %>
MANHOLE_USER = <%= @manhole_user %>
MANHOLE_PUBLIC_KEY = <%= @manhole_public_key %>

# To configure special settings for the carbon-cache instance 'b', uncomment this:
#[cache:b]
#LINE_RECEIVER_PORT = 2103
#PICKLE_RECEIVER_PORT = 2104
#CACHE_QUERY_PORT = 7102
# and any other settings you want to customize, defaults are inherited
# from [carbon] section.
# You can then specify the --instance=b option to manage this instance



[relay]
LINE_RECEIVER_INTERFACE = <%= @relay_line_receiver_interface %>
LINE_RECEIVER_PORT = <%= @relay_line_receiver_port %>
PICKLE_RECEIVER_INTERFACE = <%= @relay_pickle_receiver_interface %>
PICKLE_RECEIVER_PORT = <%= @relay_pickle_receiver_port %>

# Set to false to disable logging of successful connections
LOG_LISTENER_CONNECTIONS = <%= @relay_log_listener_connections_bool ? 'True' : 'False' %>

# Carbon-relay has several options for metric routing controlled by RELAY_METHOD
#
# Use relay-rules.conf to route metrics to destinations based on pattern rules
#RELAY_METHOD = rules
#
# Use consistent-hashing for even distribution of metrics between destinations
#RELAY_METHOD = consistent-hashing
#
# Use consistent-hashing but take into account an aggregation-rules.conf shared
# by downstream carbon-aggregator daemons. This will ensure that all metrics
# that map to a given aggregation rule are sent to the same carbon-aggregator
# instance.
# Enable this for carbon-relays that send to a group of carbon-aggregators
#RELAY_METHOD = aggregated-consistent-hashing
RELAY_METHOD = <%= @relay_method %>

# If you use consistent-hashing you can add redundancy by replicating every
# datapoint to more than one machine.
REPLICATION_FACTOR = <%= @replication_factor %>

# This is a list of carbon daemons we will send any relayed or
# generated metrics to. The default provided would send to a single
# carbon-cache instance on the default port. However if you
# use multiple carbon-cache instances then it would look like this:
#
# DESTINATIONS = 127.0.0.1:2004:a, 127.0.0.1:2104:b
#
# The general form is IP:PORT:INSTANCE where the :INSTANCE part is
# optional and refers to the "None" instance if omitted.
#
# Note that if the destinations are all carbon-caches then this should
# exactly match the webapp's CARBONLINK_HOSTS setting in terms of
# instances listed (order matters!).
#
# If using RELAY_METHOD = rules, all destinations used in relay-rules.conf
# must be defined in this list
DESTINATIONS = <%= @destinations %>

# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = <%= @max_datapoints_per_message %>
MAX_QUEUE_SIZE = <%= @max_queue_size %>

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below 80% MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = <%= @relay_use_flow_control_bool ? 'True' : 'False' %>

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
USE_WHITELIST = <%= @relay_use_whitelist_bool ? 'True' : 'False' %>

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = <%= @relay_carbon_metric_prefix %>
CARBON_METRIC_INTERVAL = <%= @relay_carbon_metric_interval %>


[aggregator]
LINE_RECEIVER_INTERFACE = <%= @aggregator_line_receiver_interface %>
LINE_RECEIVER_PORT = <%= @aggregator_line_receiver_port %>

PICKLE_RECEIVER_INTERFACE = <%= @aggregator_pickle_receiver_interface %>
PICKLE_RECEIVER_PORT = <%= @aggregator_pickle_receiver_port %>

# Set to false to disable logging of successful connections
LOG_LISTENER_CONNECTIONS = <%= @aggregator_log_listener_connections_bool ? 'True' : 'False' %>

# If set true, metric received will be forwarded to DESTINATIONS in addition to
# the output of the aggregation rules. If set false the carbon-aggregator will
# only ever send the output of aggregation.
FORWARD_ALL = <%= @forward_all_bool ? 'True' : 'False' %>

# This is a list of carbon daemons we will send any relayed or
# generated metrics to. The default provided would send to a single
# carbon-cache instance on the default port. However if you
# use multiple carbon-cache instances then it would look like this:
#
# DESTINATIONS = 127.0.0.1:2004:a, 127.0.0.1:2104:b
# 
# The format is comma-delimited IP:PORT:INSTANCE where the :INSTANCE part is
# optional and refers to the "None" instance if omitted.
#
# Note that if the destinations are all carbon-caches then this should
# exactly match the webapp's CARBONLINK_HOSTS setting in terms of
# instances listed (order matters!).
DESTINATIONS = <%= @aggregator_destinations %>

# If you want to add redundancy to your data by replicating every
# datapoint to more than one machine, increase this.
REPLICATION_FACTOR = <%= @aggregator_replication_factor %>

# This is the maximum number of datapoints that can be queued up
# for a single destination. Once this limit is hit, we will
# stop accepting new data if USE_FLOW_CONTROL is True, otherwise
# we will drop any subsequently received datapoints.
MAX_QUEUE_SIZE = <%= @aggregator_max_queue_size %>

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below 80% MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = <%= @aggregator_use_flow_control_bool ? 'True' : 'False' %>

# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = <%= @aggregator_max_datapoints_per_message %>

# This defines how many datapoints the aggregator remembers for
# each metric. Aggregation only happens for datapoints that fall in
# the past MAX_AGGREGATION_INTERVALS * intervalSize seconds.
MAX_AGGREGATION_INTERVALS = <%= @max_aggregation_intervals %>

# By default (WRITE_BACK_FREQUENCY = 0), carbon-aggregator will write back
# aggregated data points once every rule.frequency seconds, on a per-rule basis.
# Set this (WRITE_BACK_FREQUENCY = N) to write back all aggregated data points
# every N seconds, independent of rule frequency. This is useful, for example,
# to be able to query partially aggregated metrics from carbon-cache without
# having to first wait rule.frequency seconds.
WRITE_BACK_FREQUENCY = <%= @write_back_frequency %>

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
USE_WHITELIST = <%= @aggregator_use_whitelist_bool ? 'True' : 'False' %>

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = <%= @aggregator_carbon_metric_prefix %>
CARBON_METRIC_INTERVAL = <%= @aggregator_carbon_metric_interval %>
